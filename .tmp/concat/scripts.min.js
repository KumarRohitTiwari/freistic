'use strict';

/**
 * Created by Rohit Tiwari.
 */
var app = angular.module('freisticApp', ['ui.router', 'ngResource', 'ngStorage', 'ngProgress', 'ui.bootstrap', 'ngCookies', 'angular-jwt', 'ngSanitize', 'rzModule', 'directive.loading']);

app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', "$httpProvider", function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
	$httpProvider.interceptors.push('AuthenticationFactory');
	$locationProvider.html5Mode(true);
	$urlRouterProvider.otherwise("/");
	$stateProvider.state("blank", {
		url: "/",
		templateUrl: "views/home.html"
	});
}]);

app.run(['$rootScope', 'ngProgressFactory', '$state', '$location', function ($rootScope, ngProgressFactory, $state, $location, $sessionStorage) {
	$rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams, options) {
		$rootScope.progressbar = ngProgressFactory.createInstance();
		$rootScope.progressbar.start();
		$rootScope.location = $location;
	});

	$rootScope.$on('$locationChangeStart', function (event, toState, toParams, fromState, fromParams, options) {
		//AuthService.checkPermission();
	});

	$rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
		$rootScope.progressbar.complete();
		$rootScope.bodyClass = toState.bodyClass;
	});

	$rootScope.$on('$stateChangeError', function (event) {
		$state.go('undefined');
	});
}]);
/**
* @preserve Created by Rohit Tiwari.
*/
app.service("UserService", ["$http", "$sessionStorage", "$stateParams", function ($http, $sessionStorage, $stateParams) {
	this.loadUserData = function () {
		var userData = angular.copy($sessionStorage.userData);
		return userData;
	};
}]);

app.factory('AuthenticationFactory', ['$window', '$q', function ($window, $q) {
	var factoryObj = {};
	factoryObj.response = function (config) {
		return config;
	};
	factoryObj.request = function (config) {
		return config;
	};
	factoryObj.responseError = function (errorResponse) {
		switch (errorResponse.status) {
			case 403:
				break;
		}
		return $q.resolve(errorResponse);
	};
	return factoryObj;
}]);

app.factory("TokenFactory", ["jwtHelper", "$cookies", function (jwtHelper, $cookies) {
	var factory = {};
	var userJWT = null;
	var userDetails = null;
	factory.getUserJWT = function () {
		userJWT = $cookies.get('authorisedUser');
		return userJWT;
	};
	factory.checkTokenExpiration = function () {
		if (userJWT) {
			console.log("***********", jwtHelper.isTokenExpired(userJWT));
			return jwtHelper.isTokenExpired(userJWT);
		} else {
			return "not exists";
		}
	};
	factory.decodeToken = function () {
		if (userJWT) {
			userDetails = jwtHelper.decodeToken(userJWT);
		}
	};
	factory.getUserInfo = function () {
		return userDetails;
	};
	return factory;
}]);
angular.module('directive.loading', []).directive('loading', ['$http', function ($http) {
	return {
		restrict: 'A',
		link: function link(scope, elm, attrs) {
			scope.isLoading = function () {
				return $http.pendingRequests.length > 0;
			};
			scope.$watch(scope.isLoading, function (v) {
				if (v) {
					elm.show();
				} else {
					elm.hide();
				}
			});
		}
	};
}]);
//# sourceMappingURL=scripts.min.js.map
